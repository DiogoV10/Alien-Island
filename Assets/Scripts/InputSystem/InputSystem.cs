//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""5bd0bcdd-a199-47e1-9661-6a2c063e294d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""804ffbf9-8d04-4a99-b850-783f68ba1230"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""d8e74b68-f83c-4e20-bef8-07d2b0cc9d63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""777f5f37-b937-4a2f-8362-723e466d5e76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""8ee5dcc2-eb32-4042-95c1-5c1741d3bb17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e60c246e-05ef-43d2-b4b6-69ba872156cd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""30803857-3e4e-4c65-aaf8-dc6449926227"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3237aebc-faa5-4962-a35e-a16336bab0e5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5bb33c2d-f08f-4d47-b7bb-00cafbf306e1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef86ef36-625a-49a0-b316-ddb47099297f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4c08c847-4eef-4baa-abac-e32af833883f"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1da7c8d8-ae62-4a62-8b74-9baa20858758"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""353a4ca4-37a7-4650-9893-cad2f743b247"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""70b35fd5-e880-4bea-bf7b-30338830a9d0"",
            ""actions"": [
                {
                    ""name"": ""CamRotLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2b53b0d9-0c8d-4459-98a3-9d1a4f149fc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CamRotRight"",
                    ""type"": ""Button"",
                    ""id"": ""039f4371-711f-48cc-9752-5b49357debc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce025e8d-011b-4dc2-ba05-c646fd97e038"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45e91a7e-8936-4d19-b647-28eef3bbcfc0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamRotRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""cd7916f1-9349-45d1-a0de-84c3ee729780"",
            ""actions"": [
                {
                    ""name"": ""AttackMelee"",
                    ""type"": ""Button"",
                    ""id"": ""a17385d1-0c3a-48fc-98a0-dfe1a88f51eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackMeleeHold"",
                    ""type"": ""Button"",
                    ""id"": ""313e66e6-0e2c-4fb5-808d-42a285bab69c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AttackRange"",
                    ""type"": ""Button"",
                    ""id"": ""eff7c75d-c4c1-4b2d-bf21-df88952fb42b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UltimateMelee"",
                    ""type"": ""Button"",
                    ""id"": ""e6b8edaf-6633-4525-a28a-bc1ab0366e3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UltimateRange"",
                    ""type"": ""Button"",
                    ""id"": ""37e604d7-5737-42fd-b6f2-d2b6c5689be9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""505c6ca3-cbea-4325-acb3-0ac4ece27554"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""5fc8099d-f79b-4ae7-a3bc-188531c8d96b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeMeleeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""5b11e5e0-231b-41c9-8dd4-7d39b099c6c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeRangeWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""29b68b9f-139d-4008-a5e7-2a0fe595dfd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f1c8283-da50-4754-a53c-88e95775849a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackMelee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f35bd4ba-6bc2-4548-99e3-136ca83d5e93"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackMeleeHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6875c5a-9fd2-45a7-b80a-0f816a4e856d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackRange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8da8c916-f6a9-46de-b030-9826a1991603"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateMelee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca691db8-07a1-4bec-b74d-e27e774dbbff"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UltimateRange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cc95643-e2c9-4dd3-8d15-233ed6ee9643"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2984a406-90cb-458a-b09c-93f6cf52c7e7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""779d4219-2221-4f40-9f39-b98e8fcbf25c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeMeleeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6ae6f01-8402-4e73-bcce-5a08e1e5b733"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeRangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""3f8a67e1-d0ae-4eff-bb2f-6609c9fff931"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a21588ac-d4ae-42b2-99db-5b312e80e852"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e968def5-5c9e-407a-9f58-6af4d1d02e53"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Run = m_Movement.FindAction("Run", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Dash = m_Movement.FindAction("Dash", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_CamRotLeft = m_Camera.FindAction("CamRotLeft", throwIfNotFound: true);
        m_Camera_CamRotRight = m_Camera.FindAction("CamRotRight", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_AttackMelee = m_Combat.FindAction("AttackMelee", throwIfNotFound: true);
        m_Combat_AttackMeleeHold = m_Combat.FindAction("AttackMeleeHold", throwIfNotFound: true);
        m_Combat_AttackRange = m_Combat.FindAction("AttackRange", throwIfNotFound: true);
        m_Combat_UltimateMelee = m_Combat.FindAction("UltimateMelee", throwIfNotFound: true);
        m_Combat_UltimateRange = m_Combat.FindAction("UltimateRange", throwIfNotFound: true);
        m_Combat_Skill = m_Combat.FindAction("Skill", throwIfNotFound: true);
        m_Combat_LockOn = m_Combat.FindAction("LockOn", throwIfNotFound: true);
        m_Combat_ChangeMeleeWeapon = m_Combat.FindAction("ChangeMeleeWeapon", throwIfNotFound: true);
        m_Combat_ChangeRangeWeapon = m_Combat.FindAction("ChangeRangeWeapon", throwIfNotFound: true);
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_Interact = m_Interactions.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Run;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Dash;
    public struct MovementActions
    {
        private @InputSystem m_Wrapper;
        public MovementActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Run => m_Wrapper.m_Movement_Run;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Dash => m_Wrapper.m_Movement_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_CamRotLeft;
    private readonly InputAction m_Camera_CamRotRight;
    public struct CameraActions
    {
        private @InputSystem m_Wrapper;
        public CameraActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamRotLeft => m_Wrapper.m_Camera_CamRotLeft;
        public InputAction @CamRotRight => m_Wrapper.m_Camera_CamRotRight;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @CamRotLeft.started += instance.OnCamRotLeft;
            @CamRotLeft.performed += instance.OnCamRotLeft;
            @CamRotLeft.canceled += instance.OnCamRotLeft;
            @CamRotRight.started += instance.OnCamRotRight;
            @CamRotRight.performed += instance.OnCamRotRight;
            @CamRotRight.canceled += instance.OnCamRotRight;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @CamRotLeft.started -= instance.OnCamRotLeft;
            @CamRotLeft.performed -= instance.OnCamRotLeft;
            @CamRotLeft.canceled -= instance.OnCamRotLeft;
            @CamRotRight.started -= instance.OnCamRotRight;
            @CamRotRight.performed -= instance.OnCamRotRight;
            @CamRotRight.canceled -= instance.OnCamRotRight;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_AttackMelee;
    private readonly InputAction m_Combat_AttackMeleeHold;
    private readonly InputAction m_Combat_AttackRange;
    private readonly InputAction m_Combat_UltimateMelee;
    private readonly InputAction m_Combat_UltimateRange;
    private readonly InputAction m_Combat_Skill;
    private readonly InputAction m_Combat_LockOn;
    private readonly InputAction m_Combat_ChangeMeleeWeapon;
    private readonly InputAction m_Combat_ChangeRangeWeapon;
    public struct CombatActions
    {
        private @InputSystem m_Wrapper;
        public CombatActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @AttackMelee => m_Wrapper.m_Combat_AttackMelee;
        public InputAction @AttackMeleeHold => m_Wrapper.m_Combat_AttackMeleeHold;
        public InputAction @AttackRange => m_Wrapper.m_Combat_AttackRange;
        public InputAction @UltimateMelee => m_Wrapper.m_Combat_UltimateMelee;
        public InputAction @UltimateRange => m_Wrapper.m_Combat_UltimateRange;
        public InputAction @Skill => m_Wrapper.m_Combat_Skill;
        public InputAction @LockOn => m_Wrapper.m_Combat_LockOn;
        public InputAction @ChangeMeleeWeapon => m_Wrapper.m_Combat_ChangeMeleeWeapon;
        public InputAction @ChangeRangeWeapon => m_Wrapper.m_Combat_ChangeRangeWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @AttackMelee.started += instance.OnAttackMelee;
            @AttackMelee.performed += instance.OnAttackMelee;
            @AttackMelee.canceled += instance.OnAttackMelee;
            @AttackMeleeHold.started += instance.OnAttackMeleeHold;
            @AttackMeleeHold.performed += instance.OnAttackMeleeHold;
            @AttackMeleeHold.canceled += instance.OnAttackMeleeHold;
            @AttackRange.started += instance.OnAttackRange;
            @AttackRange.performed += instance.OnAttackRange;
            @AttackRange.canceled += instance.OnAttackRange;
            @UltimateMelee.started += instance.OnUltimateMelee;
            @UltimateMelee.performed += instance.OnUltimateMelee;
            @UltimateMelee.canceled += instance.OnUltimateMelee;
            @UltimateRange.started += instance.OnUltimateRange;
            @UltimateRange.performed += instance.OnUltimateRange;
            @UltimateRange.canceled += instance.OnUltimateRange;
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
            @ChangeMeleeWeapon.started += instance.OnChangeMeleeWeapon;
            @ChangeMeleeWeapon.performed += instance.OnChangeMeleeWeapon;
            @ChangeMeleeWeapon.canceled += instance.OnChangeMeleeWeapon;
            @ChangeRangeWeapon.started += instance.OnChangeRangeWeapon;
            @ChangeRangeWeapon.performed += instance.OnChangeRangeWeapon;
            @ChangeRangeWeapon.canceled += instance.OnChangeRangeWeapon;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @AttackMelee.started -= instance.OnAttackMelee;
            @AttackMelee.performed -= instance.OnAttackMelee;
            @AttackMelee.canceled -= instance.OnAttackMelee;
            @AttackMeleeHold.started -= instance.OnAttackMeleeHold;
            @AttackMeleeHold.performed -= instance.OnAttackMeleeHold;
            @AttackMeleeHold.canceled -= instance.OnAttackMeleeHold;
            @AttackRange.started -= instance.OnAttackRange;
            @AttackRange.performed -= instance.OnAttackRange;
            @AttackRange.canceled -= instance.OnAttackRange;
            @UltimateMelee.started -= instance.OnUltimateMelee;
            @UltimateMelee.performed -= instance.OnUltimateMelee;
            @UltimateMelee.canceled -= instance.OnUltimateMelee;
            @UltimateRange.started -= instance.OnUltimateRange;
            @UltimateRange.performed -= instance.OnUltimateRange;
            @UltimateRange.canceled -= instance.OnUltimateRange;
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
            @ChangeMeleeWeapon.started -= instance.OnChangeMeleeWeapon;
            @ChangeMeleeWeapon.performed -= instance.OnChangeMeleeWeapon;
            @ChangeMeleeWeapon.canceled -= instance.OnChangeMeleeWeapon;
            @ChangeRangeWeapon.started -= instance.OnChangeRangeWeapon;
            @ChangeRangeWeapon.performed -= instance.OnChangeRangeWeapon;
            @ChangeRangeWeapon.canceled -= instance.OnChangeRangeWeapon;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Interactions
    private readonly InputActionMap m_Interactions;
    private List<IInteractionsActions> m_InteractionsActionsCallbackInterfaces = new List<IInteractionsActions>();
    private readonly InputAction m_Interactions_Interact;
    public struct InteractionsActions
    {
        private @InputSystem m_Wrapper;
        public InteractionsActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interactions_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionsActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IInteractionsActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnCamRotLeft(InputAction.CallbackContext context);
        void OnCamRotRight(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnAttackMelee(InputAction.CallbackContext context);
        void OnAttackMeleeHold(InputAction.CallbackContext context);
        void OnAttackRange(InputAction.CallbackContext context);
        void OnUltimateMelee(InputAction.CallbackContext context);
        void OnUltimateRange(InputAction.CallbackContext context);
        void OnSkill(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnChangeMeleeWeapon(InputAction.CallbackContext context);
        void OnChangeRangeWeapon(InputAction.CallbackContext context);
    }
    public interface IInteractionsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
